Create an RNN-based sentiment analysis system to
classify text reviews (such as movie reviews or
product reviews) into positive, negative, or neutral
sentiments. Use datasets containing labeled text
data for training and testing the model's accuracy in
sentiment classification


import tensorflow as tf
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout
from tensorflow.keras.datasets import imdb
from tensorflow.keras.preprocessing.sequence import pad_sequences
import numpy as np

max_words = 10000   # only consider the top 10k words
max_len   = 200     # cut/pad reviews to 200 tokens

(X_train, y_train), (X_test, y_test) = imdb.load_data(num_words=max_words)

X_train = pad_sequences(X_train, maxlen=max_len)
X_test  = pad_sequences(X_test,  maxlen=max_len)

print("Training Data Shape:", X_train.shape)
print("Testing Data Shape:", X_test.shape)

model = Sequential([
    Embedding(input_dim=max_words, output_dim=128, input_length=max_len),
    LSTM(64, return_sequences=False),
    Dropout(0.5),              # LSTM layer with 64 units
    Dense(1, activation='sigmoid')  # binary output
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(
    X_train, y_train,
    epochs=5,
    batch_size=64,
    validation_data=(X_test, y_test)
)

loss, acc = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {acc*100:.2f}%")

sample_review = X_test[5].reshape(1, max_len)
prediction = model.predict(sample_review)
sentiment = "Positive" if prediction[0] > 0.5 else "Negative"
print(f"Predicted Sentiment: {sentiment}")